// http://greppipelinux.synology.me/?p=633

// ====================================================
// SKETCH DI REGOLAZIONE VIA NTP PROTOCOL
// DEL MODULO RTC DS3231
// VERSIONE 1.0.0
// AUTORE : greppipelinux.synology.me
// RICHIEDE MODULO ESP8266
// ====================================================
// Libreria esterna : TIME
// Indirizzo URL : http://www.pjrc.com/teensy/td_libs_Time.html#ds1307
// Indirizzo URL : https://github.com/PaulStoffregen/Time
// Collegamenti Esp8266
// 
// Gnd = massa
// Vcc = +5V
// SDA = GPIO4 (D2) 
// SCL = GPIO5 (D1)

#include "Wire.h"
#include <Time.h> 
#include <ESP8266WiFi.h>
#include <WiFiUDP.h>
#include <SPI.h>
// Collegamento alla lan locale
const char* ssid = "XXXXXXXXXXXXXX";
const char* password = "************";
#define DS3231_I2C_ADDRESS 0x68

// Server NTP da utilizzare per la regolazione dell'RTC:
// Qui uso uno dei server di Debian : 185.19.184.35
IPAddress timeServerIP(185,19,184,35);

int dayOfWeek;
double JD, JD0;
int second, minute, hour, day, month, year;
double ritardo_giorni;
WiFiUDP Udp;
unsigned int localPort = 8888; // porta locale d'ascolto per i pacchetti UDP
// PROTOTIPI DI FUNZIONE
byte decToBcd(byte val);
byte bcdToDec(byte val);
void setDS3231time(byte second, byte minute, byte hour, byte dayOfWeek,
 byte dayOfMonth, byte month, byte year);
void readDS3231time(byte *second,byte *minute,byte *hour,byte *dayOfWeek,
 byte *dayOfMonth,byte *month,byte *year);
String displayRTCTime(void); 
double getNtpTimeUTC(void);
void sendNTPpacket(IPAddress &address);
void data_civile (double JD, int* day, int* month, int* year, int* hour, int* minute, int* second);
double data_giuliana(int gg, int mm, int aa, int hh, int mn, int ss);
int giorno_settimana( double jd0);


// ----------------------------------------------------------
// INIZIALIZZAZIONE AMBIENTE E REGOLAZIONE NTP DEL MODULO RTC
// ----------------------------------------------------------
void setup()
{
 Wire.begin(4,5); // Inizializza come SDA = GPIO4(D2) e SCL = GPIO5(D1)
 Serial.begin(115200);
 
 while (!Serial) ; // Attende l'apertura del monitor seriale
 delay(500);
 
 Serial.println("DS3231 Modulo RTC - Regolazione tramite NTP Server su Internet.");

WiFi.begin(ssid, password);
 
 while (WiFi.status() != WL_CONNECTED) {
       delay(500);
       Serial.println("Connessione al WiFi in corso....");
 }

// Inizializza il server UDP in ascolto
 Udp.begin(localPort);
 
 Serial.println("\n\n");
 Serial.println("WiFi connesso"); 
 Serial.print("Indirizzo IP: ");
 Serial.println(WiFi.localIP());
 Serial.print("SSID : ");
 Serial.println(WiFi.SSID());
 Serial.print("Segnale : ");
 Serial.println(WiFi.RSSI());
 Serial.println();
 delay(1000);

 Serial.println("In attesa di sincronizzare l'orario......");
 
 // ------------------------------------------------------------
 // REGOLAZIONE DEL MODULO RTC VIA NTP SERVER:
 // DS3231 seconds, minutes, hours, dayOfWeek, date, month, year
 // Il server NTP ritorna sempre l'orario in UTC
 // L'eventuale passaggio al fuso locale, con la gestione
 // dell'ora estiva (DST) andrebbe fatta a posteriori.
 // Se questo orario deve essere utilizzato come TIMESTAMP in
 // un database è bene comunque lasciarlo in UTC per evitare
 // problemi all'entrata e all'uscita dell'ora estiva.
 // ------------------------------------------------------------
 JD = getNtpTimeUTC();
 // Calcolo un ritardo di 2s tra lettura dal server NTP
 // e la scrittura effettiva nel modulo RTC dovuto alla
 // latenza del codice in esecuzione.
 ritardo_giorni = 0.0000232; 
 JD = JD + ritardo_giorni;
 data_civile (JD, &day, &month, &year, &hour, &minute, &second);
 JD0 = data_giuliana(day, month, year,0,0,0);
 dayOfWeek = giorno_settimana(JD0);
 Serial.println("Orario dell'RTC PRIMA della regolazione : " + displayRTCTime());
 setDS3231time(second,minute,hour,dayOfWeek,day,month,year - 2000);
 Serial.println("Orario dell'RTC DOPO la regolazione : " + displayRTCTime());
 Serial.println("Data Giuliana = " + String(JD));
 Serial.println("Data Giuliana alle 0 UTC = " + String(JD0));
 Serial.println("Giorno della settimana = " + String(dayOfWeek));
}




